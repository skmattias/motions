@using CsAspnet.Models.dbcontext
@inject motionsContext DatabaseContext
<!DOCTYPE html>
<html lang="">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>@ViewData["Title"]</title>

    <link rel="icon" type="image/x-icon" href="~/images/c.png"/>

    @* Modified bootstrap with slightly changed colors, icons, and custom styles *@
    <link rel="stylesheet" href="~/scss/custom.css"/>
    <link rel="stylesheet" href="~/node_modules/bootstrap-material-design-icons/css/material-icons.css"/>
    <link rel="stylesheet" href="~/css/styles.css"/>

    @* Custom fonts *@
    <link rel="stylesheet" href="~/fonts/stylesheet.css" type="text/css"/>
</head>

<body data-spy="scroll" data-target="#motions" style="position: relative" class="lato-regular">
<div class="main-container" id="mainContainer">
    @{
        string expand = User.Identity.IsAuthenticated ? "navbar-expand-md" : "navbar-expand-sm";
    }
    <nav class="navbar @expand navbar-dark shadow" id="navbar">
        <div class="container">
            <a class="navbar-brand p-3 d-none d-sm-block" asp-page="/Index">
                        <img src="~/images/logo.png" style="height: 100px; width: auto;">
                    </a>
                    <a class="navbar-brand p-3 d-sm-none" asp-page="/Index">
                        <img src="~/images/small-logo.png" style="height: 100px; width: auto;">
                    </a>
            
                    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse justify-content-center" id="navbarNav">
                        <ul class="navbar-nav nav">
                            <li class="nav-item dropdown">
                                <a href="" class="nav-link dropdown-toggle" data-toggle="dropdown">
                                    Kommittéer
                                </a>
                                <div class="dropdown-menu dropdown-menu-right" style="z-index: 2000;">
                                    @foreach (var c in DatabaseContext.Committee.OrderBy(c => c.CommitteeNumber).ToList())
                                    {
                                        <a class="dropdown-item" asp-page="/Kommitteer/Index" asp-route-id="@c.CommitteeNumber"
                                           style="white-space: normal">
                                            <b class="lato-bold">@c.CommitteeNumber</b>: @c.CommitteeName
                                        </a>
                                    }
                                </div>
                            </li>
                            <li class="nav-item dropdown">
                                <a href="" class="nav-link dropdown-toggle" data-toggle="dropdown">
                                    Program
                                </a>
                                <div class="dropdown-menu dropdown-menu-right" style="z-index: 2000;">
                                    @foreach (var p in DatabaseContext.Program.OrderBy(p => p.ProgramNumber).ToList())
                                    {
                                        <a class="dropdown-item" asp-page="/Program/Index" asp-route-id="@p.ProgramNumber"
                                           style="white-space: normal">
                                            <b class="lato-bold">@p.ProgramNumber</b>: @p.ProgramTitle
                                        </a>
                                    }
                                </div>
                            </li>
                        </ul>
            
                        @if (User.Identity.IsAuthenticated)
                        {
                            <ul class="nav navbar-nav">
                                <li class="nav-item">
                                    <a class="nav-link" href="" data-toggle="modal" data-target="#copyPasteModal">Kopieringsverktyg</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Account" asp-action="Logout">Logga ut</a>
                                </li>
                            </ul>
                        }
                    </div>
        </div>
        
    </nav>

    <div class="container body-content">
        <br/>
        @RenderBody()
        <br/>
    </div>

    @* For detecting screen size *@
    <div class="device-xs d-block d-sm-none"></div>
    <div class="device-sm d-none d-sm-block"></div>
    <div class="device-md d-none d-md-block"></div>
    <div class="device-lg d-none d-lg-block"></div>

    <footer class="mt-auto py-3 text-center bg-light" id="footer">
        <div class="container">
            <div class="row">
                <div class="col-xs-12 col-md-4">
                    <h4 class="lato-bold">Kontakt</h4>
                    <div class="textwidget">
                        <strong class="lato-bold">Besöksadress:</strong> Stora Nygatan 4, Gamla stan, Stockholm
                        <br>
                        <strong class="lato-bold">Postadress:</strong> Centerstudenter, Stora Nygatan 4, <br>Box 2200, 103 15 Stockholm.
                        <br>
                        <strong class="lato-bold">E-post:</strong> <a href="mailto:centerstudenter@centerpartiet.se">centerstudenter@centerpartiet.se</a>
                        <br>
                        <strong class="lato-bold">Telefon generalsekreterare:</strong> 08-617 38 49
                        <br><br>
                    </div>
                </div>
                <div class="d-none d-md-block col-md-4">
                    <img src="~/images/sanning.png" style="height: 200px;" alt=""/>
                </div>
                <div class="col-xs-12 col-md-4">
                    <h4 class="lato-bold">Om Centerstudenter</h4>
                    <div class="textwidget">Centerstudenter är Centerpartiets fristående studentförbund. Vår politik vilar på en grön liberal grund. Det innebär att vi arbetar för ett friare, mer hållbart och mer öppet samhälle där individen är viktigare än systemet.</div>
                </div>
                <div class="col-12 d-md-none" style="padding-top: 2rem;">
                    <img src="~/images/sanning.png" style="height: 200px;" alt=""/>
                </div>
            </div>
        </div>
        
    </footer>
</div>

@* General delete modal usage: *@
@* data-toggle="modal" data-target="#generalDeleteModal" data-title="My modal title! *@
@* data-onclick="myDeleteItemFunction([...])" *@
@* General delete modal *@
<div class="modal fade" tabindex="-1" id="generalDeleteModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="generalDeleteModalLabel"></h4>
                <button class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div id="generalDeleteModalBody"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Avbryt</button>
                <button class="btn btn-danger btn-ok" id="generalDeleteModalDeleteButton">Radera</button>
            </div>
        </div>
    </div>
</div>

@* Copy-paste-modal *@
<div class="modal fade" tabindex="-1" id="copyPasteModal">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"></h4>
                <button class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <textarea class="form-control" onkeyup="autoResize(document.getElementById('copyPasteInput'));autoResize(document.getElementById('copyPasteResult'));copyFormat();" placeholder="Text kopierad från pdf" id="copyPasteInput"></textarea>
                <textarea class="form-control" onkeyup="autoResize(document.getElementById('copyPasteInput'));autoResize(document.getElementById('copyPasteResult'));" style="margin-top: 16px;" placeholder="Formaterad text" id="copyPasteResult"></textarea>
                <button class="btn btn-success pull-right" style="margin-top: 16px;" onclick="copyToClipboard()">Kopiera resultatet</button>
            </div>
        </div>
    </div>
</div>

<script src="~/node_modules/jquery/dist/jquery.js"></script>
<script src="~/node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
<script src="~/js/script.js" asp-append-version="true"></script>

<script type="text/javascript">

    function isBreakpoint(alias) {
        return $(".device-" + alias).is(":visible");
    }

    function toggleCollapseLink(item, text, targetId) {
        var element = $(item);
        var target = $("#" + targetId);
        
        // If we're in the middle of a transition, do nothing.
        if (target.hasClass("collapsing")) {
            return;
        }
        
        // Else, toggle.
        if (target.hasClass("show")) {
            element.html("<i class='mdi mdi-keyboard-arrow-right' style='z-index: -1;'></i>&nbsp;Visa " + text);
        } else {
            element.html("<i class='mdi mdi-keyboard-arrow-down' style='z-index: -1;'></i>&nbsp;Dölj " + text);
        }
    }

    function autoResize(textarea) {
        var old = parseInt(textarea.style.height.substring(0, textarea.style.height.length - 2));
        textarea.style.height = "1px";
        var ne = textarea.scrollHeight;
        if (ne < old) {
            textarea.style.height = (old) + "px";
        } else {
            textarea.style.height = (ne + 2) + "px";
        }
    }
    
    function copyFormat() {
        // Idea: the first two consecutive define the numbering. Remove them and any other consecutive numbers in the
        //       text.
        var input = $("#copyPasteInput");
        var result = $("#copyPasteResult");
        var text = input.val() + " ";
        
        var intChars = "";
        var readingInt = false;
        var startPos = 0;
        // ints: {int: startPosition}
        var ints = {};
        
        // Get the positions of all integers in the text.
        for (var i = 0; i < text.length; i++) {
            var c = text.charAt(i);
            if (c >= '0' && c <= '9') {
                // If the current character is numeric.
                // Add the char to intChars if we're already reading an int. Otherwise, start a new read.
                if (readingInt) {
                    intChars += c;
                } else {
                    intChars = c;
                    readingInt = true;
                    startPos = i;
                }
            } else if (readingInt) {
                // Else if reading int; we have reached the end of an integer.
                readingInt = false;
                ints[startPos] = intChars;
            }
        }
        
        // Filter out the actual line numbers.
        var lastConsecutiveInt = -1;
        var lastInt = -1;
        var lastPos = -1;
        var leadingInts = {};
        var foundLines = false;
        var erase = {};
        Object.keys(ints).forEach(function(key) {
            var i = parseInt(ints[key]);
            var pos = parseInt(key);
            // {pos: i}.
            
            if (i === (lastConsecutiveInt + 1)) {
                // The next line number.
                erase[pos] = i.toString().length;
                lastConsecutiveInt = i;
            } else if (!foundLines) {
                Object.keys(leadingInts).forEach(function(key) {
                    // If this is the first int that's 1 greater than one we've seen before, it's the second line 
                    // number.
                    var leadingIntInt = parseInt(leadingInts[key]);
                    var leadingIntPos = parseInt(key);
                    if (i === (leadingIntInt + 1)) {
                        erase[leadingIntPos] = leadingIntInt.toString().length;
                        erase[pos] = i.toString().length;
                        lastConsecutiveInt = i;
                        foundLines = true;
                    }
                });
                
                leadingInts[pos] = i;
            }
            
            // Save this int for the next iteration.
            lastInt = i;
            lastPos = pos;
        });
        
        // erase: {pos: length}.
        var lastStart = -100;
        var checkLineBreak = false;
        var lastLineBreakPos = -1;
        var reversedPositions = Object.keys(erase).reverse();
        reversedPositions.forEach(function(p) {
            var start = parseInt(p);
            var end = start + parseInt(erase[p]) + 1;
            text = text.slice(0, start) + text.slice(end);
            
            // If a line break was inserted last time, check its line length.
            if (checkLineBreak) {
                checkLineBreak = false;
                // alert("lastStart: " + lastStart + ", start: " + start + ", lastpos: " + lastLineBreakPos);
                if (lastStart - start > 75) {
                    text = text.slice(0, lastLineBreakPos-5) + text.slice(lastLineBreakPos-1);
                }
            }
            
            // If there was a line break, insert '!linebreak!'
            if (text.substr(start-2, 2) === ".\n") {
                text = text.slice(0, start) + "!lb!" + text.slice(start);
                checkLineBreak = true;
                lastLineBreakPos = start;
            }
            
            lastStart = start;
        });
        
        text = text.replace(/\n/g, " ");
        text = text.replace(/!lb!/g, "\n");
        result.html(text);
        result.keyup();
    }
    
    function copyToClipboard() {
        var copyText = document.getElementById("copyPasteResult");
        copyText.select();
        copyText.setSelectionRange(0, 99999); /*For mobile devices*/
        document.execCommand("copy");
    }
    
    function setMainPadding() {
        var pad = ($("#footer").height() + 32).toString() + "px";
        $("#mainContainer").css({"padding-bottom": pad});
    }
    
    $(document).ready(function() {
        // General delete modal usage:
        //  data-toggle="modal" data-target="#generalDeleteModal" data-title="My modal title!"
        //  data-onclick="myDeleteItemFunction([...])"
        var deleteModal = $("#generalDeleteModal");
        deleteModal.on("show.bs.modal", function(e) {
            $("#generalDeleteModalBody").html("");
            $("#generalDeleteModalLabel").html($(e.relatedTarget).data("title"));
            
            $(this).find('.btn-ok').off("click");
            $(this).find('.btn-ok').click(function() {
                eval($(e.relatedTarget).data("onclick"));
            });
        });
        
        // Stop spinning the button on hide.
        deleteModal.on("hidden.bs.modal", function() {
            $("#generalDeleteModalDeleteButton").html("Radera");
        });
        
        setMainPadding();
        $(window).on('resize', function() {
            setMainPadding();
        });
    });

</script>

<script type="text/javascript">

    //
    // Vars:
    var buttonSpinner = "<span class='spinner-border spinner-border-sm'></span>";
    var editing = false;

</script>

@if (User.Identity.IsAuthenticated)
{
    <script type="text/javascript">
        //
        // Att functions:
        
        function editAtt(button, attId) {
            if (editing) {
                alert("Du kan bara redigera en sak åt gången");
                return;
            }
            
            // Spin the button immediately.
            var oldButtonHtml = $(button).html();
            $(button).html(buttonSpinner);
            
            // Get the edit motion-html.
            $.ajax({
                type: "GET",
                url: "/Admin/?handler=EditAtt",
                data: {
                    "attId": attId
                },
                contentType: 'application/json; charset=utf-8"',
                success: function (result) {
                    if (result) {
                        editing = true;
                        $("#a-" + attId).html(result);
                    } else {
                        $(button).html(oldButtonHtml);
                    }
                }, error: function() {
                    $(button).html(oldButtonHtml);
                }
            });
        }
        
        /// attType:
        ///     0: Att-sats
        ///     1: Tilläggsyrkande
        ///     2: PS att-sats
        ///     3: Program-att
        ///     4: Program-tilläggsyrkande
        function addAtt(button, motionId, attType) {
            if (editing) {
                alert("Du kan bara redigera en sak åt gången");
                return;
            }
            
            // Spin the button immediately.
            var oldButtonHtml = $(button).html();
            $(button).html(buttonSpinner);
            
            // Get the add motion-html.
            $.ajax({
                type: "GET",
                url: "/Admin/Index?handler=AddAtt",
                data: {
                    "motionId": motionId,
                    "attType": attType
                },
                contentType: 'application/json; charset=utf-8"',
                success: function (result) {
                    editing = true;
                    if (attType == 2) {
                        // We know that the motion id passed is the same as for the actual ps att list div id.
                        $("#newPsAttDiv-" + motionId).html(result);
                    } else if (attType == 3 || attType == 4) {
                        // Program att.
                        $("#newProgramAttDiv-" + motionId).html(result);
                    } else {
                        $("#newAttDiv-" + motionId).html(result);
                    }
                }, error: function() {
                    $(button).html(oldButtonHtml);
                }
            });
        }
        
        function cancelAddAtt(button, motionId, attType) {
            // Spin the button immediately.
            var oldButtonHtml = $(button).html();
            $(button).html(buttonSpinner);
            
            // Get the add motion-html.
            $.ajax({
                type: "GET",
                url: "/Admin/Index?handler=CancelAddAtt",
                data: {
                    "motionId": motionId,
                    "attType": attType
                },
                contentType: 'application/json; charset=utf-8"',
                success: function (result) {
                    editing = false;
                    if (attType == 2) {
                        $("#newPsAttDiv-" + motionId).html(result);
                    } else if (attType == 3 || attType == 4) {
                        $("#newProgramAttDiv-" + motionId).html(result);
                    } else {
                        $("#newAttDiv-" + motionId).html(result);
                    }
                }, error: function() {
                    $(button).html(oldButtonHtml);
                }
            });
        }
        
        function deleteAtt(button, attId, isProgramAtt) {
            var oldButtonHtml = $(button).html();
            $(button).html(buttonSpinner + oldButtonHtml);
            
            $.ajax({
                traditional: true,
                type: "POST",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                url: "/Admin/Index?handler=DeleteAtt",
                data: JSON.stringify(attId),
                contentType: 'application/json; charset=utf-8"',
                success: function(result) {
                    if (result.result) {
                        if (isProgramAtt) {
                            loadProgram();
                        } else {
                            loadMotions();
                        }
                        $("#generalDeleteModal").modal("hide");
                    } else {
                        alert(result.message);
                        $(button).html(oldButtonHtml);
                    }
                }, error: function() {
                    alert("Okänt fel, prova att ladda om sidan");
                    $(button).html(oldButtonHtml);
                }
            });
        }
    
    </script>
}

@RenderSection("Scripts", required: false)
</body>
</html>

@*dotnet ef dbcontext scaffold "server=localhost;database=motions;user=root" MySql.Data.EntityFrameworkCore -o Models/dbcontext -f*@